// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // decode
    Not16(in=instruction, out=notxx);
    Not16(in=notxx, out[15]=isCInst, out[12]=compa, out[6..11]=comp,
          out[3..5]=dest, out[0..2]=jump, out[2]=j1, out[1]=j2, out[0]=j3,
          out[5]=desta, out[4]=destd, out[3]=destm,
          out[11]=czx, out[10]=cnx, out[9]=czy, out[8]=cny, out[7]=cf, out[6]=cno);

    // A Register
    // load A? !isCInst | desta
    Not(in=isCInst, out=isAInst);
    Or(a=isAInst, b=desta, out=loadAReg);
    // select
    Mux16(a=ALUoutput, b=instruction,
      sel=isAInst, out=ARegInput);
    ARegister(in=ARegInput, load=loadAReg, out=ARegout, out[0..14]=addressM);

    //writeM
    And(a=isCInst, b=destm, out=writeM);

    // D Register
    And(a=destd, b=isCInst, out=loadDReg);
    DRegister(in=ALUoutput, load=loadDReg, out=DRegout);

    // ALU
    Mux16(a=ARegout, b=inM, sel=compa, out=AMRegout);
    ALU(x=DRegout,
        y=AMRegout,
        zx=czx, nx=cnx, zy=czy, ny=cny, f=cf, no=cno,
        out=ALUoutput, zr=zr, ng=ng,
        // Jumps
        zr=EQ,
        ng=LT,
        out=outM);

    Not(in=LT, out=GE);
    Not(in=EQ, out=NE);
    Or(a=LT, b=EQ, out=LE);
    Not(in=LE, out=GT);

    DMux8Way(in=true,
      sel[2]=j1, sel[1]=j2, sel[0]=j3,
      a=JNULL, b=JGT, c=JEQ, d=JGE, e=JLT, f=JNE, g=JLE, h=JMP);

    And(a=JGT, b=GT, out=LGT);
    And(a=JEQ, b=EQ, out=LEQ);
    And(a=JGE, b=GE, out=LGE);
    And(a=JLT, b=LT, out=LLT);
    And(a=JNE, b=NE, out=LNE);
    And(a=JLE, b=LE, out=LLE);

    Or8Way(in[0]=false, in[1]=LGT, in[2]=LEQ, in[3]=LGE,
           in[4]=LLT,   in[5]=LNE, in[6]=LLE, in[7]=JMP,
           out=LoadPC);

    And(a=isCInst, b=LoadPC, out=LoadPCReg);

    // PC
    PC(in=ARegout, load=LoadPCReg, inc=true, reset=reset, out[0..14]=pc);
}
